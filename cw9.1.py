# Завдання на урок
# Завдання: Обчислення довжини найдовшої зростаючої підпослідовності
#
# Дано список цілих чисел. Потрібно написати функцію, яка знайде довжину найдовшої строго зростаючої підпослідовності за допомогою рекурсії з мемоізацією.
#
#  Опис задачі:
#
# Знайти довжину найдовшої підпослідовності в списку чисел, де кожне наступне число більше за попереднє.
#
# Приклад:
# Вхід: [10, 22, 9, 33, 21, 50, 41, 60, 80]
# Вихід: 6
# Пояснення: Найдовша зростаюча підпослідовність: [10, 22, 33, 50, 60, 80], її довжина - 6.
#
# Пояснення:
# 1. Мемоізація: Зберігати результати обчислень для кожної позиції, щоб уникнути повторних обчислень.
# 2. Рекурсія: Використовувати рекурсивний підхід для знаходження довжини найдовшої підпослідовності, яка починається з кожного елемента.
#
#
# Пояснення коду:
#
# 1. Функція lis_ending_at обчислює довжину найдовшої зростаючої підпослідовності, що закінчується на індексі index.
# 2. Використовується мемоізація, щоб уникнути повторних обчислень.
# 3. Головна функція longest_increasing_subsequence проходить по всьому списку і знаходить максимальну довжину зростаючої підпослідовності, використовуючи допоміжну функцію lis_ending_at.

def longest_increasing_subsequence(arr):
    memo = {}
    def lis_ending_at(index):
        if index in memo:
            return memo[index]
        for previous_index in range(index):
            if